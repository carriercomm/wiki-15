See also BlogUriFormat

----

Again in the vein of CoolUrisDontChange I'm thinking that I need a better readonly nimblemachines.com wiki URI. Having the script name in the URI - as in

  http://nimblemachines.com/browse?RecentChanges

is a bit ugly, since it never changes. I'm thinking that once this "mirror" gets indexed - a Yahoo spybot visited the day I made the change! - I'll be leaving a trail of URIs that, since I'm thinking today that they are ugly, may change. Thus I am breaking rules I strongly agree with and hold close to my heart. Yuck.

Any ideas? --DavidFrech

>>

Well, that's one of the dangers of being in DesignMode as opposed to DeployMode and going live.  I wouldn't lose sleep over it.  We're brand new
here and most of the traffic volume is from the principal EvilDoers.  As
you will discover, the great thing about these bots is that they re-index
often and religiously.  If we had the URI thing down in a couple of weeks
it would be fine.  Besides, "When freedom is outlawed only outlaws will be
free."  So, I support you in breaking the rules, even those you've imposed on yourself. ;-)   I'll think about the URI format. 
--DouglasShacteau

>

Oh, and I should make another comment, by way of explanation. The reason that "browse" is there is that I ''eventually'' want nimblemachines.com/something to host a read-only version of ... something. My personal blogwiki? Probably. And nimblemachines.com/wiki (or whatever it's called) was going to be ''my'' edit-friendly interface. I don't need to have both interfaces at top-level, however. (I don't even need them to be in the same domain. I could have something like edit.nimblemachines.com/something to be the writable, and plain nimblemachines.com/something as the read-only version. So maybe I need to figure this out for both versions.

Right now I have an Apache directive (in a .htaccess file) that says

  DirectoryIndex browse

in nimblemachines.com/ and one that says

  DirectoryIndex wiki

in the other, writable, wiki. This forwards accesses to / to browse, and to /<elided>/ to wiki, so when you first visit you don't have to name the script. However, after that, when the script makes links for itself, it uses the "canonical" name - the DirectoryIndex one. I could change this too.

What I'd ''really'' like to do (but haven't figured out how yet) is to have

  nimblemachines.com/pagename -> wikiscript?pagename

It's easy to do this:

  nimblemachines.com/?pagename -> wikiscript?pagename

In fact it works right now. But I don't like the question mark.

--DavidFrech

So, having talked about this out loud, I decided to make the writable script a subdomain. I think this is a nice way to go.

I still haven't solved the above problem - of removing the script name ''entirely'' from the browse-only URIs. --DavidFrech

----

Note: [[http://nimblemachines.com/robots.txt]] ''allows'' its content to be spidered. The writable version does not. So I'm going to be talking about nimblemachines.com here, not the wiki ''per se''.

I've noticed, looking at the server logs, that Yahoo's spider only indexes the pages available from the front page. It does not follow links deeper than that, which is too bad, because it grabs RecentChanges, which basically links to everything.

[[http://help.yahoo.com/help/us/ysearch/slurp/ Yahoo's spider]] seems to be a bit reticent about "dynamic content", but they never specify how it decides what is dynamic and what isn't.

So I'm having URI woes again.

The URI schemes for CherryPy and RubyOnRails remind me that using query strings is a kludge - esp since I want to be able to make template pages where all the values from the query string can be used as parameters when rendering the page.

Right now, the URIs take the following forms (I will only show the part ''after'' "nimblemachines.com"):

  /
  /wiki
  /wiki?PageName
  /wiki?action=PageName

The first form, a bare "/", works because of the Apache DirectoryIndex hack explained above (and in ApacheServerIssues).

The second form, "/wiki", calls the script, which fills in the missing page name with a default page (set in config.pl).

The third form is the most common and straightforward, and is generated by the wiki script when rendering page links.

The last form is for editing, diffing, and searching.

I would prefer a format more like this:

  /
  /PageName
  /PageName/action

or, possibly:

  /wiki
  /wiki/PageName
  /wiki/PageName/action

There are interesting issues with both of these; most are the result of serious fundamental design flaws in Apache (which date back to the CERN and NCSA httpd's). (ApacheServerIssues talks about similar flaws relating to the seeming requirement that file name extensions be present in URIs.)

----

= A short and painful introduction to HTTP

Before I talk about that, though, a bit of background on the mechanics of HTTP.

If you enter

  http://nimblemachines.com

into your browser's address bar, a bunch of things happen. Your browser connects to nimblemachines.com on port 80 (the default for HTTP), and issues the following request (assuming a modern browser that supports HTTP 1.1):

  GET / HTTP/1.1

and the server answers with a page of some kind. If you go to

  http://nimblemachines.com/wiki

things are more interesting. Your browser requests

  GET /wiki HTTP/1.1

If "wiki" is a directory on the server, it will send a 301 (permanent) redirect (back to your browser) to

  http://nimblemachines.com/wiki/

Your browser will then obediently request

  GET /wiki/ HTTP/1.1

Now the server has some decisions to make. (In this explanation I will use Apache for concreteness.) There is a directive, [[http://httpd.apache.org/docs-2.0/mod/mod_dir.html#directoryindex DirectoryIndex]], that allows the user to specify a series of filenames that will be searched for, in order, in the requested directory. The first one found is returned as a "directory index". If none is found, and if directory listings are turned on, the server creates an HTML page with links to each file and subdirectory. Otherwise, it complains.

Let's say we have specified

  DirectoryIndex skrypto

(in the ''wiki'' directory on the server) and we have made the request

  GET /wiki/ HTTP/1.1

The server will respond ''as if'' the request had been

  GET /wiki/skrypto HTTP/1.1

and if the file "skrypto" is a script, and if we have told Apache this, the script is executed, and its output returned as the "contents" of the file.

So far so good.

----

= Back to our regularly-scheduled pain

On a site that only hosts a wiki, I would like to use request URIs like

  /
  /PageName
  /PageName/action

Let's talk about these first. It turns out that these are not the only request URIs we care about. We have to access the images and the stylesheet needed to render the page; they have the following request URIs:

  /images/lambda
  /images/images/valid-xhtml10
  /images/valid-css
  /style/screen

Our wiki URI scheme must take care not to make these inaccessible. And if you want to see "fancy" directory indexes using Apache's [[http://httpd.apache.org/icons/icon.sheet lame icons]], you have to make sure that requests like

  /icons/<image>

are mapped to Apache's icons directory.

Given that some URIs refer to static files and others to generated pages, a scheme to distinguish them is critical. A simple one would be something like: 

''I'll finish this later. I'm tired.''

----

TangentialInterlude

[[http://tinyurl.com/ TinyURL]] 