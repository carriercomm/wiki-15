#!/usr/bin/perl -w

do "../common.perl";
do "../edit-common.perl";

# Could use an attrib for this?
# backup-<modtime> or something?
sub make_backup_page {
    my ($page, $modstring) = @_;
    my $file = "$pagedir/$page";
    if (-r "$file" && -f "$file") {
        my $backup_file = "$archivedir/$page." . $modstring;
        write_file($backup_file, page_attrib($page, 'markup'));
    }
}

sub do_save {
    my $edit = $form{'edittext'};
    $edit =~ s/\r//g;   # CRLF -> LF

    my $mod_current = page_attrib("$page", 'modtime');

    # we have to check for edit collisions
    if ($mod_current != $form{'modtime'}) {
        $content = <<"";
<p>
Unfortunately, someone else has edited and saved $page since you started
editing it. The edit area still contains <strong>your</strong> version; if
you open an edit window on the current version of the page, you'll be able
to merge your changes.
</p>

        make_edit_page($edit);
        return "collided";      # we failed to save, so don't do a "show"
    }

    # check if user wants to delete the page - edittext has to consist
    # solely of the words "chainsaw kitty"
    if ($form{'edittext'} =~ m/^chainsaw kitty$/i) {
        delete_page(uncamelcase($page));
        # if the page DeletedPage exists, show it; otherwise show homepage
        $page = page_exists("DeletedPage")
            ? "DeletedPage"     # notify user
            : $defaultpage;     # gotta go somewhere!
        return "ok";
    }
        
#    make_backup_page("$page", iso_timestamp("$mod_current"));

    # convert time stamps - now honors <pre>
    my $now = time();               # current (file write) time
    my $stamp = stamp($now);

# XXX: remove 2nd \n after I fix ul code!!
# XXX: and add back in the '* ' at the start of the line!!
#    my $text = "* $page (modified $stamp from $ip)\n\n";

    my $ip = $ENV{'REMOTE_ADDR'};
    my $whatchanged = "$page ... $stamp ... $ip";

    # XXX: change this when splitting method changes in rendering code
    # we're going to do "paragraph" markup delimited with multiple newlines
    # leave pre alone
    # This bit of code has the added affect of canonicalizing the edited text:
    # chunks (paras) are separated by exactly two \n's, and the whole thing,
    # when written out to disk, is followed by a single \n.

    my @paras =  split /\n{2,}/, $edit;
    foreach my $para (@paras) {
        $para =~ s/\[now\]/$stamp/ge unless $para =~ m/^\s+/;
    }

    my %newpage = ();      # should this be the cached page?
    $newpage{'name'} = uncamelcase($page);
    $newpage{'modtime'} = $now;
    $newpage{'editcomment'} = "";       # this should delete it
    $newpage{'tags'} = $form{'tags'};

    # join paras together separated by \n\n
    $newpage{'markup'} = join "\n\n", @paras;

    # save it! but don't clobber existing attribs that we aren't explicitly
    # writing.
    put_page_attribs(%newpage);

    # prefix existing contents of RecentChanges with newest entry.
    my %recentchanges = get_page("Recent_Changes");     # uncamelcased !!
    $recentchanges{'markup'} = $changed . "\n\n" . $recentchanges{'markup'};
    put_page_attribs(%recentchanges);               # no need to put_page

    # check in change to git repo
    # put_page and put_page_attribs do "git add"
    #git("commit", "-m", "wiki: $changed");

    return "ok";
}

# logic
# GET save/<page>  redirect to show/<page>
# POST save/<page>
#    if Submit pushed, then
#        try to save; if successful, redirect to show/<page>;
#                     otherwise, collision, so stay at save/<page> and re-edit.
#    else Cancel must have been pushed, so
#        redirect to show/<page>
#
sub do_request {
    my $method = $ENV{'REQUEST_METHOD'};
    if ($method =~ m/post/i){ 
        read(STDIN, my $form, $ENV{'CONTENT_LENGTH'});
        %form = parse_http_data($form);

        $form{'submit'} =~ m/save/i
            && (do_save() eq "collided") && return;   # skip redirection
    }
    redirect("post");
}

do_request()
